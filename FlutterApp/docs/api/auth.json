{
  "title": "Auth Module - Placeholder Schema",
  "version": "0.1.0",
  "description": "Detailed placeholder schema for authentication flows used by the Flutter app. Base URLs are configured via ENV variables: API_BASE_URL and AUTH_BASE_URL. Clients must set X-Client-Version and X-Platform headers. Standard error structure: {code, message, details}.",
  "env": {
    "API_BASE_URL": "Used by general API requests (e.g., /v1/users/me, /v1/items).",
    "AUTH_BASE_URL": "Used by auth endpoints if separate from API_BASE_URL (e.g., /v1/auth/login, /v1/auth/refresh)."
  },
  "headers": {
    "Authorization": "Bearer <access_token> for protected endpoints (not required for /v1/auth/login and usually not for /v1/auth/refresh).",
    "X-Client-Version": "Semantic version of the client app, e.g., 1.0.0.",
    "X-Platform": "One of: android, ios, web, macos, linux, windows, unknown."
  },
  "rateLimiting": {
    "notes": "Responses may include X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset headers."
  },
  "endpoints": {
    "/v1/auth/login": {
      "method": "POST",
      "description": "Authenticate with email and password to obtain access and refresh tokens.",
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "required": ["email", "password"],
          "properties": {
            "email": { "type": "string", "format": "email", "example": "user@example.com" },
            "password": { "type": "string", "format": "password", "example": "hunter2" }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Login success",
          "body": {
            "type": "object",
            "required": ["accessToken", "refreshToken", "user"],
            "properties": {
              "accessToken": { "type": "string", "example": "eyJhbGciOi..." },
              "refreshToken": { "type": "string", "example": "eyJhbGciOi..." },
              "expiresIn": { "type": "integer", "format": "int64", "description": "Access token TTL in seconds", "example": 3600 },
              "user": {
                "type": "object",
                "required": ["id", "email", "name"],
                "properties": {
                  "id": { "type": "string", "example": "1" },
                  "email": { "type": "string", "format": "email", "example": "user@example.com" },
                  "name": { "type": "string", "example": "Demo User" }
                }
              }
            }
          }
        },
        "400": { "description": "Invalid input", "body": { "$ref": "#/common/Error" } },
        "401": { "description": "Invalid credentials", "body": { "$ref": "#/common/Error" } }
      },
      "security": []
    },
    "/v1/auth/refresh": {
      "method": "POST",
      "description": "Exchange a valid refresh token for a new access token.",
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "required": ["refreshToken"],
          "properties": {
            "refreshToken": { "type": "string", "example": "eyJhbGciOi..." }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Refresh success",
          "body": {
            "type": "object",
            "required": ["accessToken"],
            "properties": {
              "accessToken": { "type": "string", "example": "eyJhbGciOi..." },
              "expiresIn": { "type": "integer", "format": "int64", "description": "Access token TTL in seconds", "example": 3600 }
            }
          }
        },
        "400": { "description": "Invalid input", "body": { "$ref": "#/common/Error" } },
        "401": { "description": "Invalid or expired refresh token", "body": { "$ref": "#/common/Error" } }
      },
      "security": []
    }
  },
  "tokenPolicy": {
    "accessToken": {
      "format": "JWT (suggested)",
      "lifetimeSeconds": 3600,
      "headerUsage": "Authorization: Bearer <access_token>"
    },
    "refreshToken": {
      "format": "JWT or opaque",
      "lifetimeDays": 30,
      "rotation": "Recommended to rotate refresh tokens on each refresh."
    }
  },
  "errorCodes": [
    { "code": "auth.invalid_credentials", "message": "Invalid email or password." },
    { "code": "auth.account_locked", "message": "Account is locked." },
    { "code": "auth.refresh_invalid", "message": "Invalid or expired refresh token." },
    { "code": "common.validation_failed", "message": "One or more fields failed validation." },
    { "code": "common.unauthorized", "message": "Missing or invalid authentication." }
  ],
  "common": {
    "Error": {
      "type": "object",
      "required": ["code", "message"],
      "properties": {
        "code": { "type": "string", "example": "auth.invalid_credentials" },
        "message": { "type": "string", "example": "Invalid email or password." },
        "details": { "description": "Optional error details", "nullable": true }
      }
    }
  },
  "notes": [
    "All endpoints are versioned under /v1.",
    "The Flutter app constructs Authorization headers using the stored access token from Preferences.",
    "X-Client-Version and X-Platform are built in the app via interceptors and may be required for analytics or rollout control."
  ]
}
